#!/usr/bin/env zsh
function chmoujump() {
    local jumpdirs=${CHMOUJUMP_DIRS:-"$HOME/git"}
    [[ -d ${jumpdirs} ]] || jumpdirs=$HOME
    local opt_n opt_p opt fnd listalias choosealias
    local res args preview
    local notfuzzy="-e"
    local sedcmd="sed"
    local fdcmd="fd"

    (( $+commands[gsed] )) && sedcmd="gsed"
    (( $+commands[fdfind] )) && fdcmd="fdfind"

    local reverser="tac"
    [[ $OSTYPE == darwin* ]] && (( ! $+commands[tac] )) && reverser="tail -r"

    local zshz_listing="{ zshz -t | ${reverser} | $sedcmd 's/.* //' }"

    local preview_command
    if (( $+commands[exa] )); then
        preview_command="exa --level 2 --tree --color=always --group-directories-first {}"
    elif (( $+commands[tree] )); then
        preview_command="tree -C -L 2 -x --noreport --dirsfirst {}"
    else
        preview_command="ls -1 -R {}"
    fi

    while getopts ":npfPAah" opt; do
        case $opt in
            a) choosealias=true ;;
            A) listalias=true ;;
            f) notfuzzy="" ;;
            h) print "Usage: chmoujump [options] [directory]
Options:
  -a    Choose from saved aliases
  -A    List all saved aliases
  -f    Use fuzzy matching
  -n    Don't use zshz for matching
  -p    Print the target directory instead of changing to it
  -P    Show directory preview in selection
  -h    Show this help message
                "
                return 0 ;;
            n) opt_n=true ;;
            p) opt_p=true ;;
            P) preview="--preview=\"${preview_command}\"" ;;
            *) print "Nothing: $OPTARG"; return 1 ;; # Fixed typo in \*
            \?) print "Invalid option: $OPTARG"; return 1 ;; # Added return value
        esac
    done
    (( OPTIND > 1 )) && shift $(( OPTIND - 1 ))

    (( $+functions[zshz] )) || {
        opt_n=true
        zshz_listing="{ true }"
    }

    [[ ${listalias} == true ]] && {
        zmodload zsh/stat
        local -A times
        for key in ${(k)CHMOUJUMP_ALIASES}; do
            local target=${CHMOUJUMP_ALIASES[$key]}
            local index_file="${target}/.git/index"
            [[ -f "$index_file" ]] && times[$key]=$(stat +ctime -L -- "$index_file"):$target
        done
        print -l ${${${(vo)times}#*:}/$HOME\//\~/}
        return
    }


    [[ ${choosealias} == true ]] && {
        local alias_choice

        # Get zshz ranking data
        local -A zshz_ranks
        if (( $+functions[zshz] )); then
            local rank ppath
            zshz -l | while read -r rank ppath; do
                [[ -n "$rank" && -n "$ppath" ]] && zshz_ranks[$ppath]=$rank
            done
        fi

        # Prepare sorted aliases based on zshz ranks
        local sorted_output=""
        for key in ${(k)CHMOUJUMP_ALIASES}; do
            local target=${CHMOUJUMP_ALIASES[$key]}
            local rank=${zshz_ranks[$target]:-0}  # Use 0 if not in zshz
            [[ -e ${target} ]] || continue

            # Format for sorting: rank|key|formatted_display
            sorted_output+="${rank}|${key}|$(printf "%-15s -> %s\n" "$key" "${CHMOUJUMP_ALIASES[$key]/$HOME/~}")"$'\n'
        done

        # Sort by rank (descending) and display
        alias_choice=$(print -l ${(f)sorted_output} | sort -t '|' -k1,1nr | cut -d'|' -f3- | fzf \
            --header="Choose an alias (sorted by frequency/recency):")

        [[ -n ${alias_choice} ]] && {
            local selected_alias=${${alias_choice%%\ ->*}%%[[:space:]]#}
            local target=${CHMOUJUMP_ALIASES[$selected_alias]}
            [[ -z ${opt_p} ]] && cd ${target} || echo ${target}
        }
        return
    }




    fnd=$1
    if [[ -n ${fnd} ]]; then
        if (( ${+CHMOUJUMP_ALIASES[$fnd]} )); then
            echo "ALIAS: ${CHMOUJUMP_ALIASES[$fnd]}"
            [[ -z ${opt_p} ]] && cd ${CHMOUJUMP_ALIASES[$fnd]}
            return
        fi

        [[ -z ${opt_n} ]] && {
            local zz=$(zshz -e ${fnd})
            [[ -n ${zz} ]] && {
                echo "ZSHZ: ${zz}"
                [[ -z ${opt_p} ]] && {
                    [[ ${zz} =~ ^\~ ]] && zz=${zz/#\~/${HOME}}
                    cd ${zz}
                }
                return
            }
        }
        args="-q ${fnd}"
    fi

    local fdlisting="{ ${fdcmd} -d 2 -t d . ${=jumpdirs} }"
    local sorter="$sedcmd -e 's,$HOME,\~,' -e 's,/$,,'"
    local fzfcmd="fzf ${preview} ${notfuzzy} -1 --no-sort --filepath-word --header=\"Choose a directory to jump to:\" ${args}"
    res=$({ eval ${zshz_listing} ; eval ${fdlisting} } | eval ${sorter} | awk '!seen[$0]++' | eval ${fzfcmd})

    [[ -n ${res} ]] && {
        [[ ${res} =~ ^\~ ]] && res=${res/#\~/${HOME}}
        echo ${res}
        [[ -z ${opt_p} ]] && cd ${res}
    }
}
# vim: ft=zsh
